
;; Function main (main, funcdef_no=5, decl_uid=9868, cgraph_uid=5, symbol_order=5)

main (int argc, char * * argv)
{
  int D.9885;
  int _1;
  int _5;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = is_word ("Zulus");
  printf ("%d\n", _1);
  _5 = 0;
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0> [0.00%]:
  return _5;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 5 (_5 - 5 )
Partition 6 (argc_6(D) - 6 )
Partition 7 (argv_7(D) - 7 )
Partition 8 (_8(D) - 8 )


Partition map 

Partition 0 (argc_6(D) - 6 )
Partition 1 (argv_7(D) - 7 )
Partition 2 (_8(D) - 8 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (argc_6(D) - 6 )
Partition 1 (argv_7(D) - 7 )
Partition 2 (_8(D) - 8 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_5 - 5 )
Partition 2 (argc_6(D) - 6 )
Partition 3 (argv_7(D) - 7 )
Partition 4 (_8(D) - 8 )

main (int argc, char * * argv)
{
  int D.9885;
  int _1;
  int _5;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = is_word ("Zulus");
  printf ("%d\n", _1);
  _5 = 0;
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0> [0.00%]:
  return _5;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; _1 = is_word ("Zulus");

(insn 7 6 8 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f451d792120 *.LC0>)) "query.c":13 -1
     (nil))

(call_insn 8 7 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("is_word") [flags 0x3]  <function_decl 0x7f451d786100 is_word>) [0 is_word S1 A8])
            (const_int 0 [0]))) "query.c":13 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 9 8 0 (set (reg:SI 87 [ _1 ])
        (reg:SI 0 ax)) "query.c":13 -1
     (nil))

;; printf ("%d\n", _1);

(insn 10 9 11 (set (reg:SI 4 si)
        (reg:SI 87 [ _1 ])) "query.c":13 -1
     (nil))

(insn 11 10 12 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f451d7921b0 *.LC1>)) "query.c":13 -1
     (nil))

(insn 12 11 13 (set (reg:QI 0 ax)
        (const_int 0 [0])) "query.c":13 -1
     (nil))

(call_insn 13 12 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f451daedf00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "query.c":13 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))

;; _5 = 0;

(insn 14 13 0 (set (reg:SI 88 [ _5 ])
        (const_int 0 [0])) "<built-in>":0 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; <L0> [0.00%]:

(code_label 15 14 16 2 (nil) [0 uses])

(note 16 15 0 NOTE_INSN_BASIC_BLOCK)

;; return _5;

(insn 17 16 18 (set (reg:SI 89 [ <retval> ])
        (reg:SI 88 [ _5 ])) "<built-in>":0 -1
     (nil))

(jump_insn 18 17 19 (set (pc)
        (label_ref 0)) "<built-in>":0 -1
     (nil))

(barrier 19 18 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.
Removing jump 18.
Merging block 5 into block 2...
Merged blocks 2 and 5.
Merged 2 and 5 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [1 argc+0 S4 A32])
        (reg:SI 5 di [ argc ])) "query.c":12 -1
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [2 argv+0 S8 A64])
        (reg:DI 4 si [ argv ])) "query.c":12 -1
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f451d792120 *.LC0>)) "query.c":13 -1
     (nil))
(call_insn 8 7 9 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("is_word") [flags 0x3]  <function_decl 0x7f451d786100 is_word>) [0 is_word S1 A8])
            (const_int 0 [0]))) "query.c":13 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 8 10 2 (set (reg:SI 87 [ _1 ])
        (reg:SI 0 ax)) "query.c":13 -1
     (nil))
(insn 10 9 11 2 (set (reg:SI 4 si)
        (reg:SI 87 [ _1 ])) "query.c":13 -1
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f451d7921b0 *.LC1>)) "query.c":13 -1
     (nil))
(insn 12 11 13 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "query.c":13 -1
     (nil))
(call_insn 13 12 14 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f451daedf00 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "query.c":13 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 14 13 17 2 (set (reg:SI 88 [ _5 ])
        (const_int 0 [0])) "<built-in>":0 -1
     (nil))
(insn 17 14 21 2 (set (reg:SI 89 [ <retval> ])
        (reg:SI 88 [ _5 ])) "<built-in>":0 -1
     (nil))
(insn 21 17 22 2 (set (reg/i:SI 0 ax)
        (reg:SI 89 [ <retval> ])) "query.c":14 -1
     (nil))
(insn 22 21 0 2 (use (reg/i:SI 0 ax)) "query.c":14 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function is_word (is_word, funcdef_no=6, decl_uid=9865, cgraph_uid=6, symbol_order=6)

is_word (const char * word)
{
  int toReturn;
  struct FILE * fp;
  char buf[1024];
  int D.9889;
  long unsigned int _1;
  long unsigned int _2;
  int _3;
  char * _4;
  int _6;
  int _19;
  int _21;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  fp_12 = fopen ("newwords.txt", "r");
  if (fp_12 == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  perror ("fopen source-file");
  _21 = -1;
  goto <bb 9>; [0.00%]
;;    succ:       9

;;   basic block 4, loop depth 0
;;    pred:       2
  toReturn_13 = 0;
  goto <bb 7>; [0.00%]
;;    succ:       7

;;   basic block 5, loop depth 1
;;    pred:       7
  _1 = strlen (&buf);
  _2 = _1 + 18446744073709551615;
  buf[_2] = 0;
  _3 = strcmp (&buf, word_16(D));
  if (_3 == 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]
;;    succ:       6
;;                7

;;   basic block 6, loop depth 0
;;    pred:       5
  toReturn_17 = 1;
  goto <bb 8>; [0.00%]
;;    succ:       8

;;   basic block 7, loop depth 1
;;    pred:       4
;;                5
  _4 = fgets (&buf, 1024, fp_12);
  if (_4 != 0B)
    goto <bb 5>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       5
;;                8

;;   basic block 8, loop depth 0
;;    pred:       6
;;                7
  # toReturn_5 = PHI <toReturn_17(6), toReturn_13(7)>
  fclose (fp_12);
  _19 = toReturn_5;
;;    succ:       9

;;   basic block 9, loop depth 0
;;    pred:       3
;;                8
  # _6 = PHI <_21(3), _19(8)>
  buf ={v} {CLOBBER};
;;    succ:       10

;;   basic block 10, loop depth 0
;;    pred:       9
<L8> [0.00%]:
  return _6;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (toReturn_5 - 5 )
Partition 6 (_6 - 6 )
Partition 12 (fp_12 - 12 )
Partition 13 (toReturn_13 - 13 )
Partition 16 (word_16(D) - 16 )
Partition 17 (toReturn_17 - 17 )
Partition 19 (_19 - 19 )
Partition 21 (_21 - 21 )
Partition 23 (_23(D) - 23 )


Partition map 

Partition 0 (toReturn_5 - 5 )
Partition 1 (_6 - 6 )
Partition 2 (toReturn_13 - 13 )
Partition 3 (word_16(D) - 16 )
Partition 4 (toReturn_17 - 17 )
Partition 5 (_19 - 19 )
Partition 6 (_21 - 21 )
Partition 7 (_23(D) - 23 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) toReturn_5 <-> toReturn_13
(2147483646, 0) toReturn_5 <-> toReturn_17

Partition map 

Partition 0 (toReturn_5 - 5 )
Partition 1 (_6 - 6 )
Partition 2 (toReturn_13 - 13 )
Partition 3 (word_16(D) - 16 )
Partition 4 (toReturn_17 - 17 )
Partition 5 (_19 - 19 )
Partition 6 (_21 - 21 )
Partition 7 (_23(D) - 23 )

Coalesce list: (5)toReturn_5 & (13)toReturn_13 [map: 0, 2] : Success -> 0
Coalesce list: (5)toReturn_5 & (17)toReturn_17 [map: 0, 4] : Success -> 0
Coalesce list: (6)_6 & (19)_19 [map: 1, 5] : Success -> 1
Coalesce list: (6)_6 & (21)_21 [map: 1, 6] : Success -> 1
Coalesce list: (5)toReturn_5 & (17)toReturn_5: Already Coalesced.
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (toReturn_5 - 5 13 17 )
Partition 5 (_6 - 6 19 21 )
Partition 6 (fp_12 - 12 )
Partition 7 (word_16(D) - 16 )
Partition 8 (_23(D) - 23 )

is_word (const char * word)
{
  int toReturn;
  struct FILE * fp;
  char buf[1024];
  int D.9889;
  long unsigned int _1;
  long unsigned int _2;
  int _3;
  char * _4;
  int _6;
  int _19;
  int _21;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  fp_12 = fopen ("newwords.txt", "r");
  if (fp_12 == 0B)
    goto <bb 3>; [0.00%]
  else
    goto <bb 4>; [0.00%]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  perror ("fopen source-file");
  _21 = -1;
  goto <bb 9>; [0.00%]
;;    succ:       9

;;   basic block 4, loop depth 0
;;    pred:       2
  toReturn_13 = 0;
  goto <bb 7>; [0.00%]
;;    succ:       7

;;   basic block 5, loop depth 1
;;    pred:       7
  _1 = strlen (&buf);
  _2 = _1 + 18446744073709551615;
  buf[_2] = 0;
  _3 = strcmp (&buf, word_16(D));
  if (_3 == 0)
    goto <bb 6>; [0.00%]
  else
    goto <bb 7>; [0.00%]
;;    succ:       6
;;                7

;;   basic block 6, loop depth 0
;;    pred:       5
  toReturn_17 = 1;
  goto <bb 8>; [0.00%]
;;    succ:       8

;;   basic block 7, loop depth 1
;;    pred:       4
;;                5
  _4 = fgets (&buf, 1024, fp_12);
  if (_4 != 0B)
    goto <bb 5>; [0.00%]
  else
    goto <bb 8>; [0.00%]
;;    succ:       5
;;                8

;;   basic block 8, loop depth 0
;;    pred:       6
;;                7
  # toReturn_5 = PHI <toReturn_17(6), toReturn_13(7)>
  fclose (fp_12);
  _19 = toReturn_5;
;;    succ:       9

;;   basic block 9, loop depth 0
;;    pred:       3
;;                8
  # _6 = PHI <_21(3), _19(8)>
  buf ={v} {CLOBBER};
;;    succ:       10

;;   basic block 10, loop depth 0
;;    pred:       9
<L8> [0.00%]:
  return _6;
;;    succ:       EXIT

}


Partition 2: size 1024 align 16
	buf
Partition 1: size 8 align 8
	fp_12
Partition 0: size 4 align 4
	toReturn_5

;; Generating RTL for gimple basic block 2

;; fp_12 = fopen ("newwords.txt", "r");

(insn 7 6 8 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f451d792630 *.LC2>)) "query.c":21 -1
     (nil))

(insn 8 7 9 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f451d7926c0 *.LC3>)) "query.c":21 -1
     (nil))

(call_insn 9 8 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f451dbc0a00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) "query.c":21 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))

(insn 10 9 11 (set (reg:DI 93)
        (reg:DI 0 ax)) "query.c":21 -1
     (nil))

(insn 11 10 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -1048 [0xfffffffffffffbe8])) [4 fp+0 S8 A64])
        (reg:DI 93)) "query.c":21 -1
     (nil))

;; if (fp_12 == 0B)

(insn 12 11 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -1048 [0xfffffffffffffbe8])) [4 fp+0 S8 A64])
            (const_int 0 [0]))) "query.c":21 -1
     (nil))

(jump_insn 13 12 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "query.c":21 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; perror ("fopen source-file");

(insn 15 14 16 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f451d792750 *.LC4>)) "query.c":22 -1
     (nil))

(call_insn 16 15 0 (call (mem:QI (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7f451dbd7600 perror>) [0 perror S1 A8])
        (const_int 0 [0])) "query.c":22 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; _21 = -1;

(insn 17 16 0 (set (reg:SI 91 [ _6 ])
        (const_int -1 [0xffffffffffffffff])) "query.c":23 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 20 19 21 4 (nil) [0 uses])

(note 21 20 0 NOTE_INSN_BASIC_BLOCK)

;; toReturn_13 = 0;

(insn 22 21 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -1052 [0xfffffffffffffbe4])) [1 toReturn+0 S4 A32])
        (const_int 0 [0])) "query.c":26 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; _1 = strlen (&buf);

(insn 26 25 27 (parallel [
            (set (reg:DI 94)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -1040 [0xfffffffffffffbf0])))
            (clobber (reg:CC 17 flags))
        ]) "query.c":28 -1
     (nil))

(insn 27 26 28 (set (reg:DI 5 di)
        (reg:DI 94)) "query.c":28 -1
     (nil))

(call_insn/i 28 27 29 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7f451dae7700 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) "query.c":28 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

(insn 29 28 0 (set (reg:DI 87 [ _1 ])
        (reg:DI 0 ax)) "query.c":28 -1
     (nil))

;; _2 = _1 + 18446744073709551615;

(insn 30 29 0 (parallel [
            (set (reg:DI 88 [ _2 ])
                (plus:DI (reg:DI 87 [ _1 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "query.c":28 -1
     (nil))
Applying pattern match.pd:148, generic-match.c:7641
Applying pattern match.pd:84, generic-match.c:11443
Applying pattern match.pd:148, generic-match.c:7641
Applying pattern match.pd:84, generic-match.c:11443
Applying pattern match.pd:148, generic-match.c:7641
Applying pattern match.pd:84, generic-match.c:11443

;; buf[_2] = 0;

(insn 31 30 0 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (reg:DI 88 [ _2 ]))
                (const_int -1040 [0xfffffffffffffbf0])) [0 buf S1 A8])
        (const_int 0 [0])) "query.c":28 -1
     (nil))

;; _3 = strcmp (&buf, word_16(D));

(insn 32 31 33 (set (reg:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -1064 [0xfffffffffffffbd8])) [5 word+0 S8 A64])) "query.c":30 -1
     (nil))

(insn 33 32 34 (parallel [
            (set (reg:DI 96)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -1040 [0xfffffffffffffbf0])))
            (clobber (reg:CC 17 flags))
        ]) "query.c":30 -1
     (nil))

(insn 34 33 35 (set (reg:DI 4 si)
        (reg:DI 95)) "query.c":30 -1
     (nil))

(insn 35 34 36 (set (reg:DI 5 di)
        (reg:DI 96)) "query.c":30 -1
     (nil))

(call_insn/i 36 35 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f451dae5d00 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) "query.c":30 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))

(insn 37 36 0 (set (reg:SI 89 [ _3 ])
        (reg:SI 0 ax)) "query.c":30 -1
     (nil))

;; if (_3 == 0)

(insn 38 37 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ _3 ])
            (const_int 0 [0]))) "query.c":30 -1
     (nil))

(jump_insn 39 38 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "query.c":30 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; toReturn_17 = 1;

(insn 41 40 0 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -1052 [0xfffffffffffffbe4])) [1 toReturn+0 S4 A32])
        (const_int 1 [0x1])) "query.c":31 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; 

(code_label 44 43 45 6 (nil) [0 uses])

(note 45 44 0 NOTE_INSN_BASIC_BLOCK)

;; _4 = fgets (&buf, 1024, fp_12);

(insn 46 45 47 (set (reg:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -1048 [0xfffffffffffffbe8])) [4 fp+0 S8 A64])) "query.c":27 -1
     (nil))

(insn 47 46 48 (parallel [
            (set (reg:DI 98)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -1040 [0xfffffffffffffbf0])))
            (clobber (reg:CC 17 flags))
        ]) "query.c":27 -1
     (nil))

(insn 48 47 49 (set (reg:DI 1 dx)
        (reg:DI 97)) "query.c":27 -1
     (nil))

(insn 49 48 50 (set (reg:SI 4 si)
        (const_int 1024 [0x400])) "query.c":27 -1
     (nil))

(insn 50 49 51 (set (reg:DI 5 di)
        (reg:DI 98)) "query.c":27 -1
     (nil))

(call_insn 51 50 52 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f451dbcf800 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) "query.c":27 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))

(insn 52 51 0 (set (reg/f:DI 90 [ _4 ])
        (reg:DI 0 ax)) "query.c":27 -1
     (nil))

;; if (_4 != 0B)

(insn 54 52 55 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 90 [ _4 ])
            (const_int 0 [0]))) "query.c":27 -1
     (nil))

(jump_insn 55 54 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) "query.c":27 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; 

(code_label 56 55 57 7 (nil) [0 uses])

(note 57 56 0 NOTE_INSN_BASIC_BLOCK)

;; fclose (fp_12);

(insn 58 57 59 (set (reg:DI 99)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -1048 [0xfffffffffffffbe8])) [4 fp+0 S8 A64])) "query.c":35 -1
     (nil))

(insn 59 58 60 (set (reg:DI 5 di)
        (reg:DI 99)) "query.c":35 -1
     (nil))

(call_insn 60 59 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f451dbc0700 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) "query.c":35 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))

;; _19 = toReturn_5;

(insn 61 60 0 (set (reg:SI 91 [ _6 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -1052 [0xfffffffffffffbe4])) [1 toReturn+0 S4 A32])) "query.c":36 -1
     (nil))

;; Generating RTL for gimple basic block 9

;; 

(code_label 62 61 63 5 (nil) [0 uses])

(note 63 62 0 NOTE_INSN_BASIC_BLOCK)

;; buf ={v} {CLOBBER};

(nil)

;; Generating RTL for gimple basic block 10

;; <L8> [0.00%]:

(code_label 64 63 65 9 (nil) [0 uses])

(note 65 64 0 NOTE_INSN_BASIC_BLOCK)

;; return _6;

(insn 66 65 67 (set (reg:SI 92 [ <retval> ])
        (reg:SI 91 [ _6 ])) -1
     (nil))

(jump_insn 67 66 68 (set (pc)
        (label_ref 0)) -1
     (nil))

(barrier 68 67 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Redirecting jump 18 from 10 to 11.
Merging block 10 into block 9...
Merged blocks 9 and 10.
Merged 9 and 10 without moving.
Removing jump 67.
Merging block 12 into block 11...
Merged blocks 11 and 12.
Merged 11 and 12 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -1064 [0xfffffffffffffbd8])) [5 word+0 S8 A64])
        (reg:DI 5 di [ word ])) "query.c":16 -1
     (nil))
(note 3 2 4 2 NOTE_INSN_FUNCTION_BEG)
(insn 4 3 7 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                        (const_int -8 [0xfffffffffffffff8])) [3 D.9901+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "query.c":16 -1
     (nil))
(insn 7 4 8 2 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7f451d792630 *.LC2>)) "query.c":21 -1
     (nil))
(insn 8 7 9 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7f451d7926c0 *.LC3>)) "query.c":21 -1
     (nil))
(call_insn 9 8 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fopen") [flags 0x41]  <function_decl 0x7f451dbc0a00 fopen>) [0 fopen S1 A8])
            (const_int 0 [0]))) "query.c":21 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 10 9 11 2 (set (reg:DI 93)
        (reg:DI 0 ax)) "query.c":21 -1
     (nil))
(insn 11 10 12 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -1048 [0xfffffffffffffbe8])) [4 fp+0 S8 A64])
        (reg:DI 93)) "query.c":21 -1
     (nil))
(insn 12 11 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -1048 [0xfffffffffffffbe8])) [4 fp+0 S8 A64])
            (const_int 0 [0]))) "query.c":21 -1
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "query.c":21 -1
     (nil)
 -> 20)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC4") [flags 0x2]  <var_decl 0x7f451d792750 *.LC4>)) "query.c":22 -1
     (nil))
(call_insn 16 15 17 4 (call (mem:QI (symbol_ref:DI ("perror") [flags 0x41]  <function_decl 0x7f451dbd7600 perror>) [0 perror S1 A8])
        (const_int 0 [0])) "query.c":22 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 17 16 18 4 (set (reg:SI 91 [ _6 ])
        (const_int -1 [0xffffffffffffffff])) "query.c":23 -1
     (nil))
(jump_insn 18 17 19 4 (set (pc)
        (label_ref:DI 64)) "query.c":23 659 {jump}
     (nil)
 -> 64)
;;  succ:       11 [100.0%] 

(barrier 19 18 20)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 20 19 21 5 4 (nil) [1 uses])
(note 21 20 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 5 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -1052 [0xfffffffffffffbe4])) [1 toReturn+0 S4 A32])
        (const_int 0 [0])) "query.c":26 -1
     (nil))
(jump_insn 23 22 24 5 (set (pc)
        (label_ref 44)) "query.c":27 -1
     (nil)
 -> 44)
;;  succ:       8

(barrier 24 23 53)
;; basic block 6, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
(code_label 53 24 25 6 8 (nil) [1 uses])
(note 25 53 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 6 (parallel [
            (set (reg:DI 94)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -1040 [0xfffffffffffffbf0])))
            (clobber (reg:CC 17 flags))
        ]) "query.c":28 -1
     (nil))
(insn 27 26 28 6 (set (reg:DI 5 di)
        (reg:DI 94)) "query.c":28 -1
     (nil))
(call_insn/i 28 27 29 6 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7f451dae7700 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) "query.c":28 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 29 28 30 6 (set (reg:DI 87 [ _1 ])
        (reg:DI 0 ax)) "query.c":28 -1
     (nil))
(insn 30 29 31 6 (parallel [
            (set (reg:DI 88 [ _2 ])
                (plus:DI (reg:DI 87 [ _1 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) "query.c":28 -1
     (nil))
(insn 31 30 32 6 (set (mem/j:QI (plus:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (reg:DI 88 [ _2 ]))
                (const_int -1040 [0xfffffffffffffbf0])) [0 buf S1 A8])
        (const_int 0 [0])) "query.c":28 -1
     (nil))
(insn 32 31 33 6 (set (reg:DI 95)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -1064 [0xfffffffffffffbd8])) [5 word+0 S8 A64])) "query.c":30 -1
     (nil))
(insn 33 32 34 6 (parallel [
            (set (reg:DI 96)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -1040 [0xfffffffffffffbf0])))
            (clobber (reg:CC 17 flags))
        ]) "query.c":30 -1
     (nil))
(insn 34 33 35 6 (set (reg:DI 4 si)
        (reg:DI 95)) "query.c":30 -1
     (nil))
(insn 35 34 36 6 (set (reg:DI 5 di)
        (reg:DI 96)) "query.c":30 -1
     (nil))
(call_insn/i 36 35 37 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strcmp") [flags 0x41]  <function_decl 0x7f451dae5d00 strcmp>) [0 __builtin_strcmp S1 A8])
            (const_int 0 [0]))) "query.c":30 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 37 36 38 6 (set (reg:SI 89 [ _3 ])
        (reg:SI 0 ax)) "query.c":30 -1
     (nil))
(insn 38 37 39 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ _3 ])
            (const_int 0 [0]))) "query.c":30 -1
     (nil))
(jump_insn 39 38 40 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) "query.c":30 -1
     (nil)
 -> 44)
;;  succ:       7 (FALLTHRU)
;;              8 (DFS_BACK)

;; basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 (FALLTHRU)
(note 40 39 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 7 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -1052 [0xfffffffffffffbe4])) [1 toReturn+0 S4 A32])
        (const_int 1 [0x1])) "query.c":31 -1
     (nil))
(jump_insn 42 41 43 7 (set (pc)
        (label_ref 56)) "query.c":32 -1
     (nil)
 -> 56)
;;  succ:       9

(barrier 43 42 44)
;; basic block 8, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
;;              6 (DFS_BACK)
(code_label 44 43 45 8 6 (nil) [2 uses])
(note 45 44 46 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 8 (set (reg:DI 97)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -1048 [0xfffffffffffffbe8])) [4 fp+0 S8 A64])) "query.c":27 -1
     (nil))
(insn 47 46 48 8 (parallel [
            (set (reg:DI 98)
                (plus:DI (reg/f:DI 82 virtual-stack-vars)
                    (const_int -1040 [0xfffffffffffffbf0])))
            (clobber (reg:CC 17 flags))
        ]) "query.c":27 -1
     (nil))
(insn 48 47 49 8 (set (reg:DI 1 dx)
        (reg:DI 97)) "query.c":27 -1
     (nil))
(insn 49 48 50 8 (set (reg:SI 4 si)
        (const_int 1024 [0x400])) "query.c":27 -1
     (nil))
(insn 50 49 51 8 (set (reg:DI 5 di)
        (reg:DI 98)) "query.c":27 -1
     (nil))
(call_insn 51 50 52 8 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fgets") [flags 0x41]  <function_decl 0x7f451dbcf800 fgets>) [0 fgets S1 A8])
            (const_int 0 [0]))) "query.c":27 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 52 51 54 8 (set (reg/f:DI 90 [ _4 ])
        (reg:DI 0 ax)) "query.c":27 -1
     (nil))
(insn 54 52 55 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 90 [ _4 ])
            (const_int 0 [0]))) "query.c":27 -1
     (nil))
(jump_insn 55 54 56 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) "query.c":27 -1
     (nil)
 -> 53)
;;  succ:       6
;;              9 (FALLTHRU)

;; basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 8, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       7
;;              8 (FALLTHRU)
(code_label 56 55 57 9 7 (nil) [1 uses])
(note 57 56 58 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 9 (set (reg:DI 99)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -1048 [0xfffffffffffffbe8])) [4 fp+0 S8 A64])) "query.c":35 -1
     (nil))
(insn 59 58 60 9 (set (reg:DI 5 di)
        (reg:DI 99)) "query.c":35 -1
     (nil))
(call_insn 60 59 61 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("fclose") [flags 0x41]  <function_decl 0x7f451dbc0700 fclose>) [0 fclose S1 A8])
            (const_int 0 [0]))) "query.c":35 -1
     (nil)
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 61 60 64 9 (set (reg:SI 91 [ _6 ])
        (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -1052 [0xfffffffffffffbe4])) [1 toReturn+0 S4 A32])) "query.c":36 -1
     (nil))
;;  succ:       11 (FALLTHRU)

;; basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 9, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;;              4 [100.0%] 
(code_label 64 61 65 11 9 (nil) [1 uses])
(note 65 64 66 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 70 11 (set (reg:SI 92 [ <retval> ])
        (reg:SI 91 [ _6 ])) -1
     (nil))
(insn 70 66 71 11 (set (reg/i:SI 0 ax)
        (reg:SI 92 [ <retval> ])) "query.c":37 -1
     (nil))
(insn 71 70 72 11 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                                (const_int -8 [0xfffffffffffffff8])) [3 D.9901+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (scratch:DI))
        ]) "query.c":37 -1
     (nil))
(jump_insn 72 71 78 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) "query.c":37 -1
     (nil)
 -> 75)
;;  succ:       14
;;              13 (FALLTHRU)

;; basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
(note 78 72 73 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(call_insn 73 78 74 13 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f451d793d00 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "query.c":37 -1
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      

(barrier 74 73 75)
;; basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 13, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       11
(code_label 75 74 79 14 10 (nil) [1 uses])
(note 79 75 76 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 76 79 0 14 (use (reg/i:SI 0 ax)) "query.c":37 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)


;; Function py_myFunction (py_myFunction, funcdef_no=7, decl_uid=9881, cgraph_uid=7, symbol_order=7)

py_myFunction (struct PyObject * self, struct PyObject * args)
{
  char * s;
  struct PyObject * D.9894;
  struct PyObject * _4;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  s_1 = "Testing!";
  _4 = Py_BuildValue ("s", s_1);
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0> [0.00%]:
  return _4;
;;    succ:       EXIT

}



Partition map 

Partition 1 (s_1 - 1 )
Partition 4 (_4 - 4 )
Partition 5 (self_5(D) - 5 )
Partition 6 (args_6(D) - 6 )
Partition 7 (_7(D) - 7 )


Partition map 

Partition 0 (self_5(D) - 5 )
Partition 1 (args_6(D) - 6 )
Partition 2 (_7(D) - 7 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (self_5(D) - 5 )
Partition 1 (args_6(D) - 6 )
Partition 2 (_7(D) - 7 )

After Coalescing:

Partition map 

Partition 0 (s_1 - 1 )
Partition 1 (_4 - 4 )
Partition 2 (self_5(D) - 5 )
Partition 3 (args_6(D) - 6 )
Partition 4 (_7(D) - 7 )

py_myFunction (struct PyObject * self, struct PyObject * args)
{
  char * s;
  struct PyObject * D.9894;
  struct PyObject * _4;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  s_1 = "Testing!";
  _4 = Py_BuildValue ("s", s_1);
;;    succ:       3

;;   basic block 3, loop depth 0
;;    pred:       2
<L0> [0.00%]:
  return _4;
;;    succ:       EXIT

}


Partition 0: size 8 align 8
	s_1

;; Generating RTL for gimple basic block 2

;; s_1 = "Testing!";

(insn 7 6 8 (set (reg/f:DI 89)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f451d79e1b0 *.LC5>)) "query.c":40 -1
     (nil))

(insn 8 7 0 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S8 A64])
        (reg/f:DI 89)) "query.c":40 -1
     (nil))

;; _4 = Py_BuildValue ("s", s_1);

(insn 9 8 10 (set (reg:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S8 A64])) "query.c":41 -1
     (nil))

(insn 10 9 11 (set (reg:DI 4 si)
        (reg:DI 90)) "query.c":41 -1
     (nil))

(insn 11 10 12 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f451d79e240 *.LC6>)) "query.c":41 -1
     (nil))

(insn 12 11 13 (set (reg:QI 0 ax)
        (const_int 0 [0])) "query.c":41 -1
     (nil))

(call_insn 13 12 14 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Py_BuildValue") [flags 0x41]  <function_decl 0x7f451d717500 Py_BuildValue>) [0 Py_BuildValue S1 A8])
            (const_int 0 [0]))) "query.c":41 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))

(insn 14 13 0 (set (reg/f:DI 87 [ _4 ])
        (reg:DI 0 ax)) "query.c":41 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; <L0> [0.00%]:

(code_label 15 14 16 12 (nil) [0 uses])

(note 16 15 0 NOTE_INSN_BASIC_BLOCK)

;; return _4;

(insn 17 16 18 (set (reg/f:DI 88 [ <retval> ])
        (reg/f:DI 87 [ _4 ])) "query.c":41 -1
     (nil))

(jump_insn 18 17 19 (set (pc)
        (label_ref 0)) "query.c":41 -1
     (nil))

(barrier 19 18 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.
Removing jump 18.
Merging block 5 into block 2...
Merged blocks 2 and 5.
Merged 2 and 5 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [6 self+0 S8 A64])
        (reg:DI 5 di [ self ])) "query.c":39 -1
     (nil))
(insn 3 2 4 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -32 [0xffffffffffffffe0])) [6 args+0 S8 A64])
        (reg:DI 4 si [ args ])) "query.c":39 -1
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 89)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7f451d79e1b0 *.LC5>)) "query.c":40 -1
     (nil))
(insn 8 7 9 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S8 A64])
        (reg/f:DI 89)) "query.c":40 -1
     (nil))
(insn 9 8 10 2 (set (reg:DI 90)
        (mem/f/c:DI (plus:DI (reg/f:DI 82 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S8 A64])) "query.c":41 -1
     (nil))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg:DI 90)) "query.c":41 -1
     (nil))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7f451d79e240 *.LC6>)) "query.c":41 -1
     (nil))
(insn 12 11 13 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "query.c":41 -1
     (nil))
(call_insn 13 12 14 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("Py_BuildValue") [flags 0x41]  <function_decl 0x7f451d717500 Py_BuildValue>) [0 Py_BuildValue S1 A8])
            (const_int 0 [0]))) "query.c":41 -1
     (nil)
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 14 13 17 2 (set (reg/f:DI 87 [ _4 ])
        (reg:DI 0 ax)) "query.c":41 -1
     (nil))
(insn 17 14 21 2 (set (reg/f:DI 88 [ <retval> ])
        (reg/f:DI 87 [ _4 ])) "query.c":41 -1
     (nil))
(insn 21 17 22 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 88 [ <retval> ])) "query.c":42 -1
     (nil))
(insn 22 21 0 2 (use (reg/i:DI 0 ax)) "query.c":42 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)

